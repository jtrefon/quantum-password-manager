name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build (${{ matrix.target }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: linux
            archive: password_manager-linux-x86_64.tar.gz
            binary: password_manager
          - target: x86_64-pc-windows-msvc
            os: windows
            archive: password_manager-windows-x86_64.zip
            binary: password_manager.exe
          - target: x86_64-apple-darwin
            os: macos
            archive: password_manager-macos-x86_64.tar.gz
            binary: password_manager
          - target: aarch64-apple-darwin
            os: macos
            archive: password_manager-macos-aarch64.tar.gz
            binary: password_manager

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        targets: ${{ matrix.target }}

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Install target
      run: rustup target add ${{ matrix.target }}

    - name: Build release
      run: cargo build --release --target ${{ matrix.target }}

    - name: Create release archive
      run: |
        mkdir -p dist
        if [ "${{ matrix.os }}" = "windows" ]; then
          cd target/${{ matrix.target }}/release
          zip -r ../../../dist/${{ matrix.archive }} ${{ matrix.binary }}
        else
          cd target/${{ matrix.target }}/release
          tar -czf ../../../dist/${{ matrix.archive }} ${{ matrix.binary }}
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.archive }}
        path: dist/${{ matrix.archive }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          password_manager-linux-x86_64.tar.gz
          password_manager-windows-x86_64.zip
          password_manager-macos-x86_64.tar.gz
          password_manager-macos-aarch64.tar.gz
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }} 