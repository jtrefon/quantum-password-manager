name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, beta, nightly]
        include:
          - rust: stable
            toolchain: stable
          - rust: beta
            toolchain: beta
          - rust: nightly
            toolchain: nightly
      fail-fast: false
    continue-on-error: ${{ matrix.rust == 'nightly' }}

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.toolchain }}
        components: clippy, rustfmt

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.toolchain }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run cargo check
      run: cargo check --all-features

    - name: Run cargo clippy
      run: cargo clippy --all-features -- -D warnings

    - name: Run cargo fmt check
      run: cargo fmt --all -- --check

    - name: Run tests
      run: cargo test --all-features
      # Note: Several tests are commented out in src/tests.rs for CI performance:
      # - Quantum encryption tests (too intensive)
      # - File-based tests with save_to_file operations (Argon2 timeouts)
      # - Tests using SecuritySettings::default() (high iteration counts)
      # All remaining tests use reduced security settings for fast CI execution

    - name: Run security audit
      run: cargo audit

  code-coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable

    - name: Install cargo-tarpaulin
      run: cargo install cargo-tarpaulin

    - name: Generate coverage report
      run: cargo tarpaulin --out Html --output-dir coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage/tarpaulin-report.html
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false